---
import { capitalize } from '$lib/utils/helpers';
import config from '$lib/config/data'
import { map } from 'astro:schema';
interface Props {

  heading: string;
  client?: string;
  subtitle?: string[];
  background?: any | null;
  link?: {
    label?: string;
    href?: string;
  };
  vimeo?: string;
  tags?: string[];
  fullscreen?: boolean;
  homepage?: boolean;
  date?: string;
  projectpage?: boolean;
}
const {
  tags = [],
  heading,
  vimeo,
  homepage = false,
  projectpage = false,
  background,
  client,
  subtitle = [],
  link,
  fullscreen = false,
  date,
}: Props = Astro.props;

const fs = fullscreen ? 'is-fullscreen' : ''
const style = background && background.src ? `background-image: url(${background.src});` : {};
const video = vimeo ? `https://player.vimeo.com/video/${vimeo}` : null;
const cleanTags = []// tags.filter((current) => config.tags.includes(current));

---
<>
{
  homepage && 
    <header {style} data-homepage class={`relative ${fs}`}>
      <slot />
        <div class="title absolute bottom-18 px-4 md:px-16 hidden md:block">
          <h1 class="text-lg md:text-3xl">{heading}</h1>
        </div>
    </header>
}
{
  !video && background &&
    <header {style} data-project={projectpage} class="relative">
      <div class="flex flex-col heading-detail">
        <div class="title flex flex-col gap-1 text-white">
          <h1 class="text-xl md:text-3xl">{heading}</h1>
          {client && <h2 class="text-sm md:text-lg font-light">{client}</h2>}
          {!!subtitle.length && subtitle.map((para) => <p class="text-sm md:text-lg font-light">{para}</p>)}
        </div>
        {/* {
        !!cleanTags.length && <div class="tags flex flex-row justify-end gap-2">
            {cleanTags.map((tag) => (
              <div class="tag-label">{capitalize(tag)}</div>
            ))}
          </div>
        } */}
      </div>
    </header>
}
{
  video && (
    <script src="https://player.vimeo.com/api/player.js"></script>
    <header {style} class="relative" data-project={projectpage}>
      <div class="video-container">
      <iframe id="vimeo" src={video} />
      </div>
      <div class="flex flex-col heading-detail gap-8 md:gap-0">
        <div class="title flex flex-col gap-1 text-white">
          <h1 class="text-xl md:text-4xl">{heading}</h1>
          {client && <h2 class="text-sm md:text-lg font-light">{client}</h2>}
          {!!subtitle.length && subtitle.map((para) => <p class="text-sm md:text-lg font-light">{para}</p>)}
        </div>
        {/* <div class="tags flex flex-row justify-end gap-2">
          {cleanTags.map((tag) => (
            <div class="tag-label rounded-md px-2 text-xs flex items-center">{capitalize(tag)}</div>
          ))}
        </div> */}
      </div>
    </header>
  )
}
</>
<script is:inline>
  const isMobileQuery = window.matchMedia("(max-width: 640px)");
  const [$header] = document.getElementsByTagName('header')
  const heading = document.querySelector(".heading-detail")
  const $vimeo = document.getElementById("vimeo")
  let $vp = null;
  if(isMobileQuery.matches) $header.setAttribute('mobile', true)

  function toggleHeroText() {
    $header.classList.toggle('is-fullscreen')
    heading.classList.toggle("is-disabled")
  }
  async function setupVimeo($el) {
    if ($el) {
      const Player = await getVimeoAPIPlayer()
      $vp = new Player($el, {height: '100vh', maxheight: '100vh', minheight: '100vh'})
      $vp.on('play', toggleHeroText)
      $vp.on('ended', toggleHeroText)
      $vp.on('pause', toggleHeroText)
      $vp.on('loaded', () => {
        const iframeDoc = $el.contentDocument || $el.contentWindow.document;
        // const childElement = iframeDoc.getElementById('player')
        console.log(iframeDoc)
      })

    }
  }
  setupVimeo($vimeo)
  window.addEventListener('hero-is-visible', (e) => {
    if($vimeo && !e.detail) $vp.pause()
  })
  const observer = new IntersectionObserver((entries, observer) => {
  entries.forEach((entry) => {
    window.dispatchEvent(new CustomEvent("hero-is-visible", { detail: entry.isIntersecting }))
  });
  setTimeout(() => {
    const [onload] = entries
    window.dispatchEvent(new CustomEvent("hero-is-visible", { detail: onload.isIntersecting }))
  }, 100)
}, {
  root: null,
  rootMargin: "0px",
  threshold: 0.1,
});
observer.observe($header)
// hides / shows heading text on scroll - pausing for now
// if($header.dataset.hasOwnProperty('homepage')) {
//     const observerTitleText = new IntersectionObserver((entries) => {
//   entries.forEach((entry) => {
//     entry.boundingClientRect.y < -100 ? heading.classList.remove('is-disabled') : heading.classList.add('is-disabled')
//   });
// }, {
//   root: document,
//   rootMargin: "0%",
//   threshold: [.9,.8]
// });
// observerTitleText.observe($header)
// }
async function getVimeoAPIPlayer() {
  return new Promise((res, rej) => {
    let expire = 10000;
    const wait = setInterval(() => {
      if (window?.Vimeo) {
        res(window.Vimeo.Player);
        clearInterval(wait);
      }
      expire -= 100;
      if (expire <= 0) rej();
    }, 100);
  });
}
</script>
<style>
  .tags {
    width: 100%;
    .tag-label {
      border: .125em solid rgba(255, 255, 255, 0.65);
    }
  }
  #vimeo {
    width: inherit;
    height: inherit;
  }
  header {
    overflow: hidden;
    width: 100%;
    height: 80vh;
    background-color: var(--col-black);
    background-position: top;
    background-repeat: no-repeat;
    background-size: cover;
    background-attachment: fixed;
    transition: height .3s;
    &.is-fullscreen {
      height: 100dvh;
    }
    &[data-project="true"] {
      h1 {
        font-weight: 600;
      }
    }
    h1,
    h2 {
      color: var(--col-white);
      text-shadow: 0 0 .25em rgba(0,0,0,.5);
      font-weight: 600;
    }
    @media (min-width: 1080px) {
      h1,h2{
        max-width: 60%;
      }
    }
  }
  @media (max-width: 640px) {
    header {
      background-position: 50%;
      background-size: cover;
      background-attachment: unset;
    }
    h1,
    h2 {
      max-width: 100%;
    }
  }
  .heading-detail {
    position: absolute;
    width: calc(100% - (4 * var(--spacing-level-4)));
    bottom: var(--spacing-level-2);
    left: var(--spacing-level-2);
    transition: opacity 1s ease-out;
    &.is-disabled {
      opacity: 0;
    }
    @media (max-width: 768px) {
      width: calc(100% - (2 * var(--spacing-level-4)));
      left: var(--spacing-level-4);
    }
  }
  #video-container iframe #player {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.video-container {
    height: 100vh;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.video-container iframe {
    width: 100%;
    height: 100%;
    max-width: 177.78vh; /* 16:9 aspect ratio constraint */
    border: none;
      object-fit: cover;
}
</style>
